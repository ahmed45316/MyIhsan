// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reservation.Identity.Data.Context;

namespace Reservation.Identity.Data.Migrations
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20190527112954_MenuData1")]
    partial class MenuData1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Reservation.Identity.Entities.Entities.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<bool>("IsBlock");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "c21c91c0-5c2f-45cc-ab6d-1d256538a5ee",
                            IsBlock = false,
                            IsDeleted = false,
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("Reservation.Identity.Entities.Entities.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AdminId")
                        .HasMaxLength(256);

                    b.Property<string>("ClientId")
                        .HasMaxLength(256);

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsBlock");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("VendorId")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "c21c91c0-5c2f-45cc-ab6d-1d256538a4ee",
                            AccessFailedCount = 0,
                            Email = "admin@A3n.com",
                            EmailConfirmed = false,
                            IsBlock = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            PasswordHash = "ALQ9yNzGkKdXRP8gdol1whMNSIZAlmjXpF6SNHELSKf0N6+aZs24+5h8B4OzpBWrIw==",
                            PhoneNumber = "+9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "89d8ee77-0d2c-42f6-84de-efd4c72f0c2e",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Reservation.Identity.Entities.Entities.AspNetUserClaim", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(256);

                    b.Property<bool>("IsBlock");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Reservation.Identity.Entities.Entities.AspNetUserLogin", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<bool>("IsBlock");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(256);

                    b.Property<string>("UserId")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Reservation.Identity.Entities.Entities.AspNetUsersRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<bool>("IsBlock");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUsersRoles");

                    b.HasData(
                        new
                        {
                            Id = "c21c91c0-5c2f-45cc-ab6d-1d256538a6ee",
                            IsBlock = false,
                            IsDeleted = false,
                            RoleId = "c21c91c0-5c2f-45cc-ab6d-1d256538a5ee",
                            UserId = "c21c91c0-5c2f-45cc-ab6d-1d256538a4ee"
                        });
                });

            modelBuilder.Entity("Reservation.Identity.Entities.Entities.Menu", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("Action")
                        .HasMaxLength(100);

                    b.Property<string>("Controller")
                        .HasMaxLength(100);

                    b.Property<string>("Href")
                        .HasMaxLength(256);

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<bool>("IsStop");

                    b.Property<int>("ItsOrder");

                    b.Property<string>("Parameters")
                        .HasMaxLength(50);

                    b.Property<string>("ParentId")
                        .HasMaxLength(256);

                    b.Property<string>("ScreenNameAr")
                        .HasMaxLength(256);

                    b.Property<string>("ScreenNameEn")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("Reservation.Identity.Entities.Entities.MenuRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<string>("MenuId")
                        .HasMaxLength(256);

                    b.Property<string>("RoleId")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("MenuRoles");
                });

            modelBuilder.Entity("Reservation.Identity.Entities.Entities.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(450);

                    b.Property<DateTime>("ExpiresUtc");

                    b.Property<DateTime>("IssuedUtc");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("UserId")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetRefreshTokens");
                });

            modelBuilder.Entity("Reservation.Identity.Entities.Entities.AspNetUserClaim", b =>
                {
                    b.HasOne("Reservation.Identity.Entities.Entities.AspNetUser", "AspNetUser")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Reservation.Identity.Entities.Entities.AspNetUserLogin", b =>
                {
                    b.HasOne("Reservation.Identity.Entities.Entities.AspNetUser", "AspNetUser")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Reservation.Identity.Entities.Entities.AspNetUsersRole", b =>
                {
                    b.HasOne("Reservation.Identity.Entities.Entities.AspNetRole", "AspNetRole")
                        .WithMany("AspNetUsersRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Reservation.Identity.Entities.Entities.AspNetUser", "AspNetUser")
                        .WithMany("AspNetUsersRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Reservation.Identity.Entities.Entities.Menu", b =>
                {
                    b.HasOne("Reservation.Identity.Entities.Entities.Menu", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Reservation.Identity.Entities.Entities.MenuRole", b =>
                {
                    b.HasOne("Reservation.Identity.Entities.Entities.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId");

                    b.HasOne("Reservation.Identity.Entities.Entities.AspNetRole", "AspNetRole")
                        .WithMany("Menu")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Reservation.Identity.Entities.Entities.RefreshToken", b =>
                {
                    b.HasOne("Reservation.Identity.Entities.Entities.AspNetUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
